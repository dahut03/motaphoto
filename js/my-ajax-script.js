document.addEventListener("DOMContentLoaded", function() {
    console.log("SCRIPT CHARG√â : my-ajax-script.js"); // V√©rifier si le script est charg√© plusieurs fois

    const categoryFilter = document.getElementById('category-filter');
    const formatFilter = document.getElementById('format-filter');
    const dateFilter = document.getElementById('date-filter');
    const loadMoreButton = document.getElementById('second-next-button');
    const imageGallery = document.getElementById('image-gallery');

    let currentPage = 1;

    // Utiliser window.isLoading pour √©viter la red√©claration globale
    if (typeof window.isLoading === "undefined") {
        window.isLoading = false;
    }

    // V√©rification de la disponibilit√© de ajax_params
    if (typeof ajax_params === 'undefined') {
        console.error("ERREUR : ajax_params n'est pas d√©fini.");
        return;
    }

    function loadImages(page = 1) {
        if (window.isLoading) {
            console.warn("‚è≥ Requ√™te AJAX ignor√©e (d√©j√† en cours)");
            return;
        }
        window.isLoading = true;

        // D√©finir les variables uniquement si les √©l√©ments existent
        const category = categoryFilter ? categoryFilter.value : '';
        const format = formatFilter ? formatFilter.value : '';
        const date = dateFilter ? dateFilter.value : '';

        console.log(`üîÑ Appel AJAX #${page} - Cat√©gorie: ${category}, Format: ${format}, Date: ${date}`);
        console.log(ajax_params.nonce); // Affichage du nonce pour la v√©rification dans la console

        // Appel AJAX pour r√©cup√©rer les images filtr√©es
        jQuery.ajax({
            url: ajax_params.ajax_url,
            type: 'POST',
            data: {
                action: 'load_filtered_images',
                security: ajax_params.nonce, // Utilisation du nonce pour s√©curiser la requ√™te
                category: category,
                format: format,
                date: date,
                page: page
            },
            success: function(response) {
                if (response.success) {
                    console.log("‚úÖ Images charg√©es !");
                    // Traitez les images re√ßues ici (par exemple, afficher les images dans l'interface)
                } else {
                    console.warn("‚ö†Ô∏è Aucune image trouv√©e.");
                }
            },
            error: function() {
                console.error("‚ùå Erreur lors du chargement des images.");
            },
            complete: function() {
                window.isLoading = false;
            }
        });
    }

    function filterImages(page = 1) {
        console.log("üõ† Filtrage des images...");
        currentPage = page;
        loadImages(page);
    }

    if (loadMoreButton) {
        loadMoreButton.addEventListener("click", function() {
            console.log("üì• Bouton 'Charger plus' cliqu√©");
            currentPage++;
            filterImages(currentPage);
        });
    }

    if (categoryFilter) {
        categoryFilter.addEventListener("change", function() {
            console.log("üéõ Changement de cat√©gorie d√©tect√©");
            filterImages(1);
        });
    }

    if (formatFilter) {
        formatFilter.addEventListener("change", function() {
            console.log("üì∑ Changement de format d√©tect√©");
            filterImages(1);
        });
    }

    if (dateFilter) {
        dateFilter.addEventListener("change", function() {
            console.log("üìÖ Changement de date d√©tect√©");
            filterImages(1);
        });
    }

    console.log("üñº Chargement initial des images...");
    loadImages(1);
});
